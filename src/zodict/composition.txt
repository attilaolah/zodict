Node Compositions
-----------------

A normal node has one nodespace managed by mapping API and AttributedNodes have
an additional one behind attrs.

A composition is a node that has one or more nodespaces that are the base for
its child nodespace. A child has its own child nodespace and optionally
arbitrary further named nodespaces, eg. 'attrs'.

A composition can work in two general modes:
- virtual children (composition is not child.__parent__), using its nodespaces
  as child factories
- real children (composition is child.__parent__), that are compositions
  factored on the base of matching children from the nodespaces

In general: Existing hierarchies are never touched, if parenthood is needed,
wrappers/adapters need to be involved, a merging composition might be the
solution.

XXX: For the composition of virtual children, the composing mode can be defined for
each nodespace of the virtual child ('child', 'attrs', ...).


XXX: Node Compositions behave like normal nodes, but aggregate or compose their
child nodes from multiple nodespaces.

The basic setup, a compostion of two nodespaces
::
    >>> from odict import odict
    >>> from zodict import Node, Composition
    >>> from zodict.interfaces import IComposition
    >>> nodespace1 = Node()
    >>> nodespace2 = Node()
    >>> nodespaces = odict()
    >>> nodespaces['nodespace1'] = nodespace1
    >>> nodespaces['nodespace2'] = nodespace2

    >>> composition = Composition(nodespaces=nodespaces)
    >>> IComposition.providedBy(composition)
    True

Mode virtual children *first hit*
---------------------------------

Let's seed the nodespaces, a node with key 'node2' exists in both spaces
::
    >>> nodespace1['nodeA'] = nodeA = Node()
    >>> nodespace1['nodeB'] = nodeB1 = Node()
    >>> nodespace2['nodeB'] = nodeB2 = Node()
    >>> nodespace2['nodeC'] = nodeC = Node()

    >>> composition.keys()
    ['nodeA', 'nodeB', 'nodeC']

    >>> composition['nodeB'] is nodeB1
    True

    >>> composition.items()
    [('nodeA', <Node object 'nodeA' at ...>),
     ('nodeB', <Node object 'nodeB' at ...>),
     ('nodeC', <Node object 'nodeC' at ...>)]

New nodes end up in the first succeeding nodespace
::

    >>> composition['newnode'] = newnode = Node()

    >>> nodespace1.keys()
    ['nodeA', 'nodeB', 'newnode']

    >>> nodespace2.keys()
    ['nodeB', 'nodeC']

    >>> 'newnode' in composition
    True

    >>> composition['newnode'] is newnode
    True

    >>> del composition['newnode']
    >>> nodespace1.keys()
    ['nodeA', 'nodeB']

#Let's whitelist nodespace1, newnode ends now up in the second nodespace
#::
#    >>> from zodict.aliaser import DictAliaser
#    >>> nodespace1.aliaser = DictAliaser({
#    ...         '__nodeA': 'nodeA',
#    ...         'nodeB': 'nodeB',
#    ...         })
#
#    >>> composition['newnode'] = newnode = Node()
#
#    >>> nodespace1.keys()
#    ['__nodeA', 'nodeB']
#
#    >>> nodespace2.keys()
#    ['nodeB', 'nodeC', 'newnode']
#
#    >>> nodespace2['newnode'] is newnode
#    True
#
#    >>> del composition['newnode']
#    >>> nodespace2.keys()
#    ['nodeB', 'nodeC']
#
#Let's whitelist all
#::
#    >>> nodespace2.aliaser = DictAliaser(dict(
#    ...         nodeB='nodeB',
#    ...         nodeC='nodeC',
#    ...         ))
#    >>> composition['newnode'] = Node()
#    Traceback (most recent call last):
#    ...
#    KeyError: u'No nodespace accepted key newnode'
#
#    >>> composition['newnode']
#    Traceback (most recent call last):
#    ...
#    KeyError: u'No nodespace provided key newnode'
#
#    >>> del composition['newnode']
#    Traceback (most recent call last):
#    ...
#    KeyError: u'No nodespace had key newnode'
#
#
#Aliasing can be defined for each nodespace
#------------------------------------------
#
#In addition to the nodespaces internal aliases (used eg right above for
#whitelisting), a composition has a aliases odict like every other node, but
#containing one aliases per nodespace.
#
#Define aliases for nodespaces, the prefixer just aliases, the dictionary also
#whitelists
#::
#    >>> from zodict.aliaser import PrefixAliaser, NamedAliasers
#    >>> composition.aliaser = NamedAliasers(dict(
#    ...     nodespace1=PrefixAliaser('prefix^'),
#    ...     nodespace2=DictAliaser(dict(
#    ...         aliasedX='nodeB',
#    ...         aliasedY='newone',
#    ...         )),
#    ...     ))
#
#Whitelist 'foo' via nodespace1's internal aliases, that means it will not accept
#any other keys than 'foo'
#::
#    >>> nodespace1.aliaser['foo'] = 'foo'
#
#And assign something that will end up as 'foo' in nodespace1
#::
#    >>> composition['prefix^foo'] = newnode = Node()
#    >>> nodespace1.keys()
#    ['__nodeA', 'nodeB', 'foo']
#    >>> nodespace2.keys()
#    ['nodeB', 'nodeC']
#
#    >>> nodespace1['foo'] is newnode
#    True
#
#    >>> newnode.__parent__ is nodespace1
#    True
#
#    >>> newnode.__name__
#    'foo'
#
#    >>> del composition['prefix^foo']
#    >>> nodespace1.keys()
#    ['__nodeA', 'nodeB']
#
#'foo' without prefix cannot be matched to a nodespace
#::
#
#    >>> composition['foo']
#    Traceback (most recent call last):
#    ...
#    KeyError: u'No nodespace provided key foo'
#
#    >>> composition['foo'] = Node()
#    Traceback (most recent call last):
#    ...
#    KeyError: u'No nodespace accepted key foo'
#
#'aliasedY' is whitelisted for nodespace2, but does not exist yet
#::
#
#    >>> composition['aliasedY']
#    Traceback (most recent call last):
#    ...
#    KeyError: u'No nodespace provided key aliasedY'
#
##    >>> composition['aliasedY'] = Node()
##    >>> composition['aliasedY'] is nodespace2['newone']
##    True

Mode: real children *merge*
---------------------------

A composition hase one or more nodespaces that are the base for its virtual
child nodespace. A child has its own child nodespace and optionally arbitrary
further named nodespaces, eg. 'attrs'.

A merging composition is the parent of its children, as they themselves are
compositions that wrap the involved children.

For the composition of virtual children, the composing mode can be defined for
each nodespace of the virtual child ('child', 'attrs', ...).

XXX: todo
